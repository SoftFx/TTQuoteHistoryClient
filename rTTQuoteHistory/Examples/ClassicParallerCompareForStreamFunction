library(rFdk)
library(rTTQuoteHistory)
library(foreach)
library(doParallel)
library(uuid)
library(lubridate)
library(ggplot2)

Init<-function(){
  tthConnect("tp.st.soft-fx.eu", login = "5",password = "123qwe!", name=UUIDgenerate())
}


Deinit<-function(){tthDisconnect()}
Payload<-function(symbols, period){
  sapply(symbols, function(symbol) {
    startTime = Sys.Date() - weeks(3)
    period = toString(period)
    endTime = Sys.Date()
    if(period == "Day") {
      endTime = startTime + days(1)
    }
    if(period == "Week") {
      endTime = startTime + weeks(1)
    }
    d<-tthStreamTickRequest(symbol, startTime, endTime)
    count = nrow(d)
    return(count)
    if( is.null(d)) 
      stop("Bar Request returned error.") 
  })
}

countArr<<-c()
RunTest <-function(vectorVariable1, seqVariable1, clusterCount, fInit, fDeinit, fPayload)
{
  
  cl <- makeCluster(clusterCount)
  registerDoParallel(cl)
  countArr<<-c()
  totalElapsedTime<-system.time({
    foreach( clientId = 1:clusterCount, .packages = c("rTTQuoteHistory", "uuid", "lubridate"),
             .export = c("seqVariable1","vectorVariable1", "fInit", "fDeinit", "fPayload")) %dopar%
             {
               fInit()
               countArr[length(countArr)+1] <<- fPayload(vectorVariable1, seqVariable1)
               fDeinit()
             }
    
  })
  count  = sum(countArr)
  stopCluster(cl)
  return(c(totalElapsedTime[[3]], count))
}
ttConnect()
symbols<-ttConf.Symbol()
Periods = c("Day","Week")
exp<-as.data.table(expand.grid(symbolsCount=2^(0), barsCount=Periods[1:2], clusterCount=2^(0)))

result<-mapply(RunTest, lapply(exp$symbolsCount, function(count) symbols[1:count, name]), 
               exp$barsCount, exp$clusterCount, MoreArgs=list(fInit=Init, fDeinit=Deinit, fPayload=Payload))
exp[,elapsed:=result[1]]
exp[,totalBars:=result[2]*symbolsCount]
# 
# ggplot(exp, aes(x=totalBars, y=totalBars/elapsed, group=clusterCount, colour=clusterCount)) + geom_point() + geom_line()
